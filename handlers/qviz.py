# handlers/qviz.py
import logging

from anthropic import Anthropic
from telegram import Update
from telegram.ext import ContextTypes
from services.search_service import SearchService
from db.connection import get_db
from dotenv import load_dotenv


import asyncio
load_dotenv()
logger = logging.getLogger(__name__)

client = Anthropic(
    api_key=os.getenv('ANTHROPIC_API_KEY',)


async def get_claude_response(user_query: str, context: str) -> str:
    try:
        response = await asyncio.to_thread(
            lambda: client.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=3000,
                temperature=0,
                messages=[
                    {
                        "role": "user",
                        "content": f"Context: {context}\n\nQuestion: {user_query}\n\nPlease answer based only on the provided context. Please answer only on russian language."
                    }
                ]
            )
        )
        return response.content[0].text
    except Exception as e:
        logger.error(f"Error getting Claude response: {e}", exc_info=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def check_and_stop_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω"""
    if context.user_data.get('is_dialog_active'):
        context.user_data['is_dialog_active'] = False
        await update.message.reply_text(
            "üî¥ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /qviz"
        )
        return True
    return False


async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /qviz"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    active_rag_repo = context.bot_data['active_rag_repo']
    active_source = active_rag_repo.get_active_source(user_id)

    if not active_source:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω RAG –∏—Å—Ç–æ—á–Ω–∏–∫.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–æ–π /choose_rag"
        )
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    context.user_data['is_dialog_active'] = True
    context.user_data['active_source_id'] = active_source.id

    await update.message.reply_text(
        f"üü¢ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–¢–µ–∫—É—â–∏–π RAG –∏—Å—Ç–æ—á–Ω–∏–∫: {active_source.name}\n"
        "–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ /stop"
    )


async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    if context.user_data.get('is_dialog_active'):
        context.user_data['is_dialog_active'] = False
        await update.message.reply_text(
            "üî¥ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /qviz"
        )
    else:
        await update.message.reply_text(
            "‚ùóÔ∏è –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /qviz –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"
        )


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞"""
    if context.user_data.get('is_dialog_active'):
        user_message = update.message.text
        active_source_id = context.user_data.get('active_source_id')

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            db = next(get_db())
            search_service = SearchService(db)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            waiting_message = await update.message.reply_text("‚è≥ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–∫—Å—Ç—ã
            similar_texts = await search_service.search(
                source_id=active_source_id,
                query=user_message,
            )

            if not similar_texts:
                await waiting_message.delete()
                await update.message.reply_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            context_text = "\n".join(similar_texts)

            gpt_response = await get_claude_response(user_message, context_text)

            await waiting_message.delete()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            response = (
                f"ü§ñ –û—Ç–≤–µ—Ç:\n{gpt_response}\n\n"
                f"üìö –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
            for i, text in enumerate(similar_texts, 1):
                response += f"{i}. {text}\n\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(response) > 4096:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT
                await update.message.reply_text(f"ü§ñ –û—Ç–≤–µ—Ç:\n{gpt_response}")

                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                fragments_response = "üìö –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:\n"
                for i, text in enumerate(similar_texts, 1):
                    fragments_response += f"{i}. {text}\n\n"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                    if len(fragments_response) > 4000:
                        await update.message.reply_text(fragments_response)
                        fragments_response = ""

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                if fragments_response:
                    await update.message.reply_text(fragments_response)
            else:
                await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"Error during search and response generation: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        finally:
            if 'db' in locals():
                db.close()
