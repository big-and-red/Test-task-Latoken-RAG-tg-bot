from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.qviz import check_and_stop_dialog

test_questions = [
    {
        "question": "–ö–∞–∫ –∑–æ–≤—É—Ç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ Latoken?",
        "options": ["–í–∏—Ç–∞–ª–∏–∫ –ë—É—Ç–µ—Ä–∏–Ω", "–í–∞–ª–µ–Ω—Ç–∏–Ω –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π", "–ü–∞–≤–µ–ª –î—É—Ä–æ–≤"],
        "correct": 1,
        "explanation": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä Latoken - –í–∞–ª–µ–Ω—Ç–∏–Ω –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π"
    },
    {
        "question": "–í–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ—Ñ—Ñ–µ—Ä—ã?",
        "options": ["17:00", "18:00", "19:00"],
        "correct": 2,
        "explanation": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ—Ñ—Ñ–µ—Ä—ã —Å–æ—Å—Ç–æ—è—Ç—Å—è –≤ 19:00"
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ?",
        "options": [
            "NFT, GameFi, Web3 Gaming",
            "Q learning, Layer 3, RAG, –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç—ã",
            "–ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—ã–µ, Social-Fi, Play-to-Earn"
        ],
        "correct": 1,
        "explanation": "–ù–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è: –ö–≤–∞–Ω—Ç–æ–≤—ã–π –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π AGI, –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç Web 2 –∫ Web 3, DeFi, Q learning, Layer 3, –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç—ã, RWA, –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å, Re-Staking, RAG, zk Rollups, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã, —Å–∏–Ω—Ç–µ—Ç–∏–∫–∞"
    }
]


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await check_and_stop_dialog(update, context)

    context.user_data['current_question'] = 0
    context.user_data['correct_answers'] = 0
    context.user_data['answers'] = []

    question = test_questions[0]

    keyboard = [[InlineKeyboardButton(opt, callback_data=f"test_{i}")]
                for i, opt in enumerate(question['options'])]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:\n\n{question['question']}",
        reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("test_"):
        return

    current_q = context.user_data.get('current_question', 0)
    selected = int(query.data.split("_")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = selected == test_questions[current_q]['correct']
    context.user_data['answers'].append({
        'question': current_q,
        'selected': selected,
        'correct': is_correct
    })

    if is_correct:
        context.user_data['correct_answers'] = context.user_data.get('correct_answers', 0) + 1
        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!"

    current_q += 1
    context.user_data['current_question'] = current_q

    if current_q < len(test_questions):
        question = test_questions[current_q]
        keyboard = [[InlineKeyboardButton(opt, callback_data=f"test_{i}")]
                    for i, opt in enumerate(question['options'])]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            f"{response}\n\n–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ 3:\n\n{question['question']}",
            reply_markup=reply_markup
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        correct_count = context.user_data['correct_answers']
        result_message = f"{response}\n\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        result_message += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count} –∏–∑ {len(test_questions)}\n\n"
        result_message += "üìù –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤:\n\n"

        for i, q in enumerate(test_questions):
            answer = context.user_data['answers'][i]
            result_message += f"–í–æ–ø—Ä–æ—Å {i + 1}: "
            result_message += "‚úÖ" if answer['correct'] else "‚ùå"
            result_message += f"\n{q['explanation']}"

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π
            if not answer['correct']:
                user_answer = q['options'][answer['selected']]
                result_message += f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}"

            result_message += "\n\n"

        result_message += "üöÄ –ñ–µ–ª–∞—é —É–¥–∞—á–∏ –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ! –ü—É—Å—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –±—É–¥—É—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∏ —É—Å–ø–µ—à–Ω—ã–º–∏!"

        await query.message.reply_text(result_message)
