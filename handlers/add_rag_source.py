import logging
import os
import tempfile
from typing import Optional, Any

from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

for logger_name in ['httpcore', 'httpx', 'urllib3', 'asyncio', 'pyrogram', 'telethon']:
    logging.getLogger(logger_name).setLevel(logging.WARNING)

logger = logging.getLogger('bot-latoken')
logger.setLevel(logging.INFO)

MAX_FILE_SIZE = 20 * 1024 * 1024  # 20,971,520 –±–∞–π—Ç

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_ARCHIVE = 1
END = ConversationHandler.END


async def add_rag_source(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_rag_source"""
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.clear()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data['waiting_for_archive'] = True

        user_id = update.effective_user.id
        logger.info(f"User {user_id} initiated RAG source addition")

        instructions = """
üìö –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:
‚Ä¢ PDF (*.pdf)
‚Ä¢ Microsoft Word (*.doc, *.docx)
‚Ä¢ Microsoft Excel (*.xls, *.xlsx)
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)
‚Ä¢ Json

‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
1. –í—Å–µ —Ñ–∞–π–ª—ã —É–ø–∞–∫–æ–≤–∞–Ω—ã –≤ ZIP-–∞—Ä—Ö–∏–≤
2. –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20MB
3. –§–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç...
"""
        await update.message.reply_text(instructions)
        logger.debug(f"Sent instructions to user {user_id}")
        return WAITING_ARCHIVE

    except Exception as e:
        logger.error(f"Error in add_rag_source: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return END


async def handle_other_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"""
    if context.user_data.get('waiting_for_archive'):
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_rag_source"
        )
    return END


async def handle_archive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞"""
    user_id = update.effective_user.id
    logger.info(f"Handling archive upload from user {user_id}")

    source: Optional[Any] = None
    temp_zip_path: Optional[str] = None

    try:
        if not update.message.document:
            logger.warning(f"User {user_id} didn't send a document")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç")
            return WAITING_ARCHIVE

        file_name = update.message.document.file_name
        file_size = update.message.document.file_size

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if file_size > MAX_FILE_SIZE:
            logger.warning(f"User {user_id} sent file exceeding size limit: {file_size} bytes")
            await update.message.reply_text("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20MB")
            return WAITING_ARCHIVE

        if not file_name.lower().endswith('.zip'):
            logger.warning(f"User {user_id} sent non-ZIP file: {file_name}")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP")
            return WAITING_ARCHIVE

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä—Ö–∏–≤–∞...")
        file = await update.message.document.get_file()

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—Ä—Ö–∏–≤–∞
        with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as temp_file:
            temp_zip_path = temp_file.name
            downloaded_bytes = await file.download_as_bytearray()
            temp_file.write(downloaded_bytes)

        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –ë–î
        source = context.bot_data['source_repo'].create_source_from_archive(
            filename=file_name,
            user_id=user_id
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
        chunks_count = await context.bot_data['archive_processor'].process_archive(temp_zip_path, source.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        context.bot_data['source_repo'].update_index_status(source.id, "completed")

        success_message = (
            f"‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!\n"
            f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {chunks_count}\n"
            f"üóÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {file_name}"
        )

        await update.message.reply_text(success_message)
        logger.info(f"Successfully completed processing for user {user_id}, source {source.id}, chunks: {chunks_count}")

    except Exception as e:
        logger.error(f"Error processing archive for user {user_id}: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        if source:
            context.bot_data['source_repo'].update_index_status(source.id, "failed")

    finally:
        context.user_data.clear()

        if temp_zip_path and os.path.exists(temp_zip_path):
            try:
                os.unlink(temp_zip_path)
            except Exception as e:
                logger.error(f"Error removing temporary file {temp_zip_path}: {str(e)}")

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞"""
    try:
        user_id = update.effective_user.id
        logger.info(f"User {user_id} cancelled archive upload")
        context.user_data.clear()
        await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Error in cancel handler: {e}", exc_info=True)
    return END


async def timeout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    try:
        context.user_data.clear()
        await update.message.reply_text(
            "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_rag_source"
        )
    except Exception as e:
        logger.error(f"Error in timeout handler: {e}", exc_info=True)
    return ConversationHandler.END


rag_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("add_rag_source", add_rag_source)],
    states={
        WAITING_ARCHIVE: [
            MessageHandler(filters.Document.ALL & ~filters.COMMAND, handle_archive),
            CommandHandler("cancel", cancel),
            CommandHandler("start", handle_other_commands),
            CommandHandler("help", handle_other_commands),
            CommandHandler("test", handle_other_commands),
            CommandHandler("qviz", handle_other_commands),
            CommandHandler("stop", handle_other_commands),
            CommandHandler("choose_rag", handle_other_commands),
            CommandHandler("add_rag_source", handle_other_commands),
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        MessageHandler(
            filters.ALL & ~filters.Document.ALL & ~filters.COMMAND,
            lambda u, c: u.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
        )
    ],
    conversation_timeout=300,
    name="rag_conversation",
    persistent=False,
    allow_reentry=True
)
